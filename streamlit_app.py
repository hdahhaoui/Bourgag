import streamlit as st
import pandas as pd
import altair as alt

# Import des modules de notre package acsim
from acsim import weather, envelope, ventilation, internal_loads, ac_model, thermal_model, scenario, ai_analysis

# Configuration de la page Streamlit
st.set_page_config(page_title="Simulation Climatisation", page_icon="‚ùÑÔ∏è", layout="wide")

# Titre de l'application
st.title("Simulation √©nerg√©tique d'un climatiseur")

# Description de l'application
st.markdown(
    "Cette application simule le **bilan thermique horaire** d'un b√¢timent et la consommation d'√©nergie d'un **climatiseur** " 
    "pour deux sc√©narios¬†: un sc√©nario de r√©f√©rence *baseline* et un sc√©nario *optimis√©*. "
    "Le mod√®le thermique utilise un r√©seau simplifi√© 1R1C conforme aux normes ISO 13790 / 52016-1. "
    "L'utilisateur peut configurer les param√®tres du b√¢timent (isolation, vitrage, ventilation, charges internes), "
    "s√©lectionner un fichier m√©t√©o au format EPW et comparer les r√©sultats entre les deux sc√©narios."
)

# Chargement du fichier m√©t√©o EPW (utilisation d'un exemple par d√©faut si aucun fichier import√©)
st.sidebar.header("Param√®tres m√©t√©orologiques")
uploaded_file = st.sidebar.file_uploader("Fichier m√©t√©o (.epw)", type=["epw"], help="Importez un fichier m√©t√©o EPW. Un exemple par d√©faut est utilis√© si aucun fichier n'est fourni.")
if uploaded_file is not None:
    # Lire le fichier EPW import√©
    weather_df = weather.read_epw(uploaded_file)
else:
    # Utiliser le fichier m√©t√©o d'exemple fourni dans data/
    weather_df = weather.read_epw("data/exemple_meteo.epw")
    st.sidebar.write("**M√©t√©o :** exemple_meteo.epw utilis√©")

# Param√®tres g√©n√©raux
st.sidebar.header("Param√®tres g√©n√©raux du b√¢timent")
# Temp√©rature int√©rieure de consigne (on suppose un maintien constant par le climatiseur si n√©cessaire)
T_int = st.sidebar.number_input("Temp√©rature int√©rieure de consigne (¬∞C)", min_value=10, max_value=30, value=25)

# S√©lections pour les niveaux d'isolation, vitrage, ventilation, charges internes
iso_options = ["Faible", "Moyen", "√âlev√©"]
vit_options = ["Faible", "Moyen", "√âlev√©"]
vent_options = ["Faible", "Moyen", "√âlev√©"]
int_options = ["Faible", "Moyen", "√âlev√©"]

st.sidebar.subheader("Sc√©nario 1 : Baseline")
iso1 = st.sidebar.selectbox("Isolation", iso_options, index=0, help="Qualit√© de l'isolation thermique de l'enveloppe (Faible = mauvaise isolation, √âlev√© = tr√®s bonne isolation)")
vit1 = st.sidebar.selectbox("Vitrage", vit_options, index=0, help="Qualit√© des vitrages et protections solaires (Faible = simple vitrage sans protection, √âlev√© = double vitrage performant avec protections)")
vent1 = st.sidebar.selectbox("Ventilation / Infiltration", vent_options, index=2, help="Taux de renouvellement d'air (Faible = maison √©tanche, √âlev√© = infiltrations √©lev√©es)")
int1 = st.sidebar.selectbox("Charges internes", int_options, index=1, help="Importance des apports internes (occupants, √©quipements)")

st.sidebar.subheader("Sc√©nario 2 : Optimis√©")
iso2 = st.sidebar.selectbox("Isolation ", iso_options, index=2, help="Isolation am√©lior√©e dans le sc√©nario optimis√©", key="iso2")
vit2 = st.sidebar.selectbox("Vitrage ", vit_options, index=2, help="Vitrages am√©lior√©s/protections solaires dans le sc√©nario optimis√©", key="vit2")
vent2 = st.sidebar.selectbox("Ventilation / Infiltration ", vent_options, index=0, help="Ventilation ma√Ætris√©e/infiltrations r√©duites dans le sc√©nario optimis√©", key="vent2")
int2 = st.sidebar.selectbox("Charges internes ", int_options, index=1, help="Apports internes (occupants, appareils) dans le sc√©nario optimis√©", key="int2")

# Cr√©ation des deux sc√©narios avec les param√®tres s√©lectionn√©s
scenario1 = scenario.Scenario(isolation=iso1, vitrage=vit1, ventilation=vent1, interne=int1, T_int=T_int)
scenario2 = scenario.Scenario(isolation=iso2, vitrage=vit2, ventilation=vent2, interne=int2, T_int=T_int)

# Simulation des deux sc√©narios (calcul du bilan thermique horaire et de la consommation clim)
results1 = thermal_model.simuler_scenario(weather_df, scenario1)
results2 = thermal_model.simuler_scenario(weather_df, scenario2)

# R√©cup√©ration des DataFrames de r√©sultats
df1 = results1['data']
df2 = results2['data']
total_energy1 = results1['total_energy_kWh']
total_energy2 = results2['total_energy_kWh']
peak_power1 = results1['peak_power_kW']
peak_power2 = results2['peak_power_kW']

# Affichage des indicateurs synth√©tiques
col1, col2, col3 = st.columns(3)
col1.metric("Conso annuelle Sc√©nario 1", f"{total_energy1:.1f} kWh")
col2.metric("Conso annuelle Sc√©nario 2", f"{total_energy2:.1f} kWh")
# Calcul de l'√©conomie en pourcentage, √©vite division par z√©ro
if total_energy1 > 0:
    economie = (1 - total_energy2/total_energy1) * 100
else:
    economie = 0.0
col3.metric("√âconomie estim√©e", f"{economie:.1f} %")

# Graphique des puissances de refroidissement (kW) sur l'ann√©e
st.subheader("Puissance de refroidissement horaire")
power_chart = thermal_model.creer_graphique_puissance(df1, df2)
st.altair_chart(power_chart, use_container_width=True)

# Graphique de l'√©nergie cumul√©e (kWh) sur l'ann√©e
st.subheader("√ânergie cumul√©e consomm√©e")
energy_chart = thermal_model.creer_graphique_energie(df1, df2)
st.altair_chart(energy_chart, use_container_width=True)

# Graphique des temp√©ratures ext√©rieure (et int√©rieure de consigne)
st.subheader("Temp√©rature ext√©rieure")
temp_chart = thermal_model.creer_graphique_temperature(df1)
st.altair_chart(temp_chart, use_container_width=True)

# Bouton de t√©l√©chargement des r√©sultats au format CSV
csv_data = thermal_model.exporter_csv(df1, df2)
st.download_button("T√©l√©charger les r√©sultats (CSV)", data=csv_data, file_name="simulation_clim.csv", mime="text/csv")

# Option d'analyse automatique via l'API DeepSeek (si les cl√©s API sont fournies dans st.secrets)
st.subheader("Analyse automatique des sc√©narios")
if 'openai_api_key' in st.secrets and 'openai_base_url' in st.secrets:
    if st.button("Lancer l'analyse automatique IA"):
        with st.spinner("üîé Analyse en cours..."):
            try:
                analyse = ai_analysis.analyser_scenarios(scenario1, scenario2, results1, results2)
                st.write("**Analyse IA :** " + analyse)
            except Exception as e:
                st.error("Erreur lors de l'appel √† l'API d'analyse : " + str(e))
else:
    st.info("‚ö†Ô∏è Pour activer l'analyse automatique, veuillez configurer `openai_api_key` et `openai_base_url` dans `st.secrets`.")
